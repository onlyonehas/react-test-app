6f0041ee725340e40bfe42c204a55787
"use strict";

var _interopRequireWildcard = require("/home/hassan/Sites/react-basic-app-robofriends/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _constants = require("./constants");

var reducers = _interopRequireWildcard(require("./reducers"));

var actions = _interopRequireWildcard(require("./actions"));

describe('searchRobots', () => {
  const intialStateSearch = {
    searchField: ''
  };
  it('it should return the intial state', () => {
    expect(reducers.searchRobots(undefined, {})).toEqual({
      searchField: ''
    });
  });
  it('should handle the CHANGE_SEARCH_FIELD', () => {
    expect(reducers.searchRobots(intialStateSearch, {
      type: _constants.CHANGE_SEARCH_FIELD,
      payload: 'abc'
    })).toEqual({
      searchField: 'abc'
    });
  });
});
describe('requestRobots', () => {
  const intialStateRobots = {
    robots: [],
    isPending: false
  };
  it('should return the intial state', () => {
    expect(reducers.requestRobots(undefined, {})).toEqual(intialStateRobots);
  });
  it('should handle REQUEST_ROBOTS_PENDING action', () => {
    expect(reducers.requestRobots(intialStateRobots, {
      type: _constants.REQUEST_ROBOTS_PENDING
    })).toEqual({
      robots: [],
      isPending: true
    });
  });
  it('should handle REQUEST_ROBOTS_SUCCESS action', () => {
    expect(reducers.requestRobots(intialStateRobots, {
      type: _constants.REQUEST_ROBOTS_SUCCESS,
      payload: [{
        id: '123',
        name: 'test',
        email: 'test@gmail.com'
      }]
    })).toEqual({
      robots: [{
        id: '123',
        name: 'test',
        email: 'test@gmail.com'
      }],
      isPending: false
    });
  });
  it('should handle REQUEST_ROBOTS_FAILED action', () => {
    expect(reducers.requestRobots(intialStateRobots, {
      type: _constants.REQUEST_ROBOTS_FAILED,
      payload: 'NOOOOOOOOOOOO!'
    })).toEqual({
      error: 'NOOOOOOOOOOOO!',
      isPending: false
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpbnRpYWxTdGF0ZVNlYXJjaCIsInNlYXJjaEZpZWxkIiwiaXQiLCJleHBlY3QiLCJyZWR1Y2VycyIsInNlYXJjaFJvYm90cyIsInVuZGVmaW5lZCIsInRvRXF1YWwiLCJ0eXBlIiwiQ0hBTkdFX1NFQVJDSF9GSUVMRCIsInBheWxvYWQiLCJpbnRpYWxTdGF0ZVJvYm90cyIsInJvYm90cyIsImlzUGVuZGluZyIsInJlcXVlc3RSb2JvdHMiLCJSRVFVRVNUX1JPQk9UU19QRU5ESU5HIiwiUkVRVUVTVF9ST0JPVFNfU1VDQ0VTUyIsImlkIiwibmFtZSIsImVtYWlsIiwiUkVRVUVTVF9ST0JPVFNfRkFJTEVEIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFRQTs7QUFDQTs7QUFFQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsTUFBSztBQUM3QixRQUFNQyxpQkFBaUIsR0FBRztBQUN6QkMsSUFBQUEsV0FBVyxFQUFFO0FBRFksR0FBMUI7QUFJQUMsRUFBQUEsRUFBRSxDQUFDLG1DQUFELEVBQXNDLE1BQUs7QUFDNUNDLElBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxZQUFULENBQXNCQyxTQUF0QixFQUFpQyxFQUFqQyxDQUFELENBQU4sQ0FDQ0MsT0FERCxDQUNTO0FBQUNOLE1BQUFBLFdBQVcsRUFBRztBQUFmLEtBRFQ7QUFFQSxHQUhDLENBQUY7QUFLQUMsRUFBQUEsRUFBRSxDQUFDLHVDQUFELEVBQTBDLE1BQUs7QUFDaERDLElBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxZQUFULENBQXNCTCxpQkFBdEIsRUFBeUM7QUFDL0NRLE1BQUFBLElBQUksRUFBRUMsOEJBRHlDO0FBRS9DQyxNQUFBQSxPQUFPLEVBQUU7QUFGc0MsS0FBekMsQ0FBRCxDQUFOLENBSUlILE9BSkosQ0FJWTtBQUNYTixNQUFBQSxXQUFXLEVBQUU7QUFERixLQUpaO0FBT0EsR0FSQyxDQUFGO0FBU0EsQ0FuQk8sQ0FBUjtBQXFCQUYsUUFBUSxDQUFDLGVBQUQsRUFBa0IsTUFBTTtBQUMvQixRQUFNWSxpQkFBaUIsR0FBRztBQUN6QkMsSUFBQUEsTUFBTSxFQUFFLEVBRGlCO0FBRXpCQyxJQUFBQSxTQUFTLEVBQUU7QUFGYyxHQUExQjtBQUtBWCxFQUFBQSxFQUFFLENBQUMsZ0NBQUQsRUFBbUMsTUFBSztBQUN6Q0MsSUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNVLGFBQVQsQ0FBdUJSLFNBQXZCLEVBQWtDLEVBQWxDLENBQUQsQ0FBTixDQUE4Q0MsT0FBOUMsQ0FBc0RJLGlCQUF0RDtBQUNBLEdBRkMsQ0FBRjtBQUlBVCxFQUFBQSxFQUFFLENBQUMsNkNBQUQsRUFBZ0QsTUFBSztBQUN0REMsSUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNVLGFBQVQsQ0FBdUJILGlCQUF2QixFQUEwQztBQUNoREgsTUFBQUEsSUFBSSxFQUFFTztBQUQwQyxLQUExQyxDQUFELENBQU4sQ0FFSVIsT0FGSixDQUVZO0FBQ1hLLE1BQUFBLE1BQU0sRUFBRSxFQURHO0FBRVhDLE1BQUFBLFNBQVMsRUFBRTtBQUZBLEtBRlo7QUFNQSxHQVBDLENBQUY7QUFTQVgsRUFBQUEsRUFBRSxDQUFDLDZDQUFELEVBQWdELE1BQUs7QUFDdERDLElBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDVSxhQUFULENBQXVCSCxpQkFBdkIsRUFBMEM7QUFDaERILE1BQUFBLElBQUksRUFBRVEsaUNBRDBDO0FBRWhETixNQUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNUTyxRQUFBQSxFQUFFLEVBQUUsS0FESztBQUVUQyxRQUFBQSxJQUFJLEVBQUUsTUFGRztBQUdUQyxRQUFBQSxLQUFLLEVBQUU7QUFIRSxPQUFEO0FBRnVDLEtBQTFDLENBQUQsQ0FBTixDQU9JWixPQVBKLENBT1k7QUFDWEssTUFBQUEsTUFBTSxFQUFFLENBQUM7QUFDUkssUUFBQUEsRUFBRSxFQUFFLEtBREk7QUFFUkMsUUFBQUEsSUFBSSxFQUFFLE1BRkU7QUFHUkMsUUFBQUEsS0FBSyxFQUFFO0FBSEMsT0FBRCxDQURHO0FBTVhOLE1BQUFBLFNBQVMsRUFBRTtBQU5BLEtBUFo7QUFlQSxHQWhCQyxDQUFGO0FBa0JBWCxFQUFBQSxFQUFFLENBQUMsNENBQUQsRUFBK0MsTUFBSztBQUNyREMsSUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNVLGFBQVQsQ0FBdUJILGlCQUF2QixFQUEwQztBQUNoREgsTUFBQUEsSUFBSSxFQUFFWSxnQ0FEMEM7QUFFaERWLE1BQUFBLE9BQU8sRUFBRTtBQUZ1QyxLQUExQyxDQUFELENBQU4sQ0FHSUgsT0FISixDQUdZO0FBQ1hjLE1BQUFBLEtBQUssRUFBRSxnQkFESTtBQUVYUixNQUFBQSxTQUFTLEVBQUU7QUFGQSxLQUhaO0FBT0EsR0FSQyxDQUFGO0FBU0EsQ0E5Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICAgIENIQU5HRV9TRUFSQ0hfRklFTEQsXG4gICAgUkVRVUVTVF9ST0JPVFNfUEVORElORyxcbiAgICBSRVFVRVNUX1JPQk9UU19TVUNDRVNTLFxuICAgIFJFUVVFU1RfUk9CT1RTX0ZBSUxFRCBcblxufSBmcm9tICcuL2NvbnN0YW50cydcblxuaW1wb3J0ICogYXMgcmVkdWNlcnMgZnJvbSAnLi9yZWR1Y2VycydcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJ1xuXG5kZXNjcmliZSgnc2VhcmNoUm9ib3RzJywgKCkgPT57XG5cdGNvbnN0IGludGlhbFN0YXRlU2VhcmNoID0ge1xuXHRcdHNlYXJjaEZpZWxkOiAnJ1xuXHR9XG5cblx0aXQoJ2l0IHNob3VsZCByZXR1cm4gdGhlIGludGlhbCBzdGF0ZScsICgpID0+e1xuXHRcdGV4cGVjdChyZWR1Y2Vycy5zZWFyY2hSb2JvdHModW5kZWZpbmVkLCB7fSkpXG5cdFx0LnRvRXF1YWwoe3NlYXJjaEZpZWxkIDogJyd9KVxuXHR9KVxuXG5cdGl0KCdzaG91bGQgaGFuZGxlIHRoZSBDSEFOR0VfU0VBUkNIX0ZJRUxEJywgKCkgPT57XG5cdFx0ZXhwZWN0KHJlZHVjZXJzLnNlYXJjaFJvYm90cyhpbnRpYWxTdGF0ZVNlYXJjaCwge1xuXHRcdFx0dHlwZTogQ0hBTkdFX1NFQVJDSF9GSUVMRCxcblx0XHRcdHBheWxvYWQ6ICdhYmMnXG5cblx0XHR9KSkudG9FcXVhbCh7XG5cdFx0XHRzZWFyY2hGaWVsZDogJ2FiYydcblx0XHR9KVxuXHR9KVxufSlcblxuZGVzY3JpYmUoJ3JlcXVlc3RSb2JvdHMnLCAoKSA9PiB7XG5cdGNvbnN0IGludGlhbFN0YXRlUm9ib3RzID0ge1xuXHRcdHJvYm90czogW10sXG5cdFx0aXNQZW5kaW5nOiBmYWxzZVxuXHR9XG5cblx0aXQoJ3Nob3VsZCByZXR1cm4gdGhlIGludGlhbCBzdGF0ZScsICgpID0+e1xuXHRcdGV4cGVjdChyZWR1Y2Vycy5yZXF1ZXN0Um9ib3RzKHVuZGVmaW5lZCwge30pKS50b0VxdWFsKGludGlhbFN0YXRlUm9ib3RzKVxuXHR9KVxuXG5cdGl0KCdzaG91bGQgaGFuZGxlIFJFUVVFU1RfUk9CT1RTX1BFTkRJTkcgYWN0aW9uJywgKCkgPT57XG5cdFx0ZXhwZWN0KHJlZHVjZXJzLnJlcXVlc3RSb2JvdHMoaW50aWFsU3RhdGVSb2JvdHMsIHtcblx0XHRcdHR5cGU6IFJFUVVFU1RfUk9CT1RTX1BFTkRJTkcsXG5cdFx0fSkpLnRvRXF1YWwoe1xuXHRcdFx0cm9ib3RzOiBbXSxcblx0XHRcdGlzUGVuZGluZzogdHJ1ZVxuXHRcdH0pXG5cdH0pXG5cblx0aXQoJ3Nob3VsZCBoYW5kbGUgUkVRVUVTVF9ST0JPVFNfU1VDQ0VTUyBhY3Rpb24nLCAoKSA9Pntcblx0XHRleHBlY3QocmVkdWNlcnMucmVxdWVzdFJvYm90cyhpbnRpYWxTdGF0ZVJvYm90cywge1xuXHRcdFx0dHlwZTogUkVRVUVTVF9ST0JPVFNfU1VDQ0VTUyxcblx0XHRcdHBheWxvYWQ6IFt7XG5cdFx0XHRcdGlkOiAnMTIzJywgXG5cdFx0XHRcdG5hbWU6ICd0ZXN0Jyxcblx0XHRcdFx0ZW1haWw6ICd0ZXN0QGdtYWlsLmNvbSdcblx0XHRcdH1dXG5cdFx0fSkpLnRvRXF1YWwoe1xuXHRcdFx0cm9ib3RzOiBbe1xuXHRcdFx0XHRpZDogJzEyMycsIFxuXHRcdFx0XHRuYW1lOiAndGVzdCcsXG5cdFx0XHRcdGVtYWlsOiAndGVzdEBnbWFpbC5jb20nXG5cdFx0XHR9XSxcblx0XHRcdGlzUGVuZGluZzogZmFsc2Vcblx0XHR9KVxuXHR9KVxuXG5cdGl0KCdzaG91bGQgaGFuZGxlIFJFUVVFU1RfUk9CT1RTX0ZBSUxFRCBhY3Rpb24nLCAoKSA9Pntcblx0XHRleHBlY3QocmVkdWNlcnMucmVxdWVzdFJvYm90cyhpbnRpYWxTdGF0ZVJvYm90cywge1xuXHRcdFx0dHlwZTogUkVRVUVTVF9ST0JPVFNfRkFJTEVELFxuXHRcdFx0cGF5bG9hZDogJ05PT09PT09PT09PT08hJ1xuXHRcdH0pKS50b0VxdWFsKHtcblx0XHRcdGVycm9yOiAnTk9PT09PT09PT09PTyEnLFxuXHRcdFx0aXNQZW5kaW5nOiBmYWxzZVxuXHRcdH0pXG5cdH0pXG59KVx0Il19