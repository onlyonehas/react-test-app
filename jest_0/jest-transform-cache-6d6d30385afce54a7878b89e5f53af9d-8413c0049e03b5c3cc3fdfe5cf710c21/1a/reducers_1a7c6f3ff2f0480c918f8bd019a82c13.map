{"version":3,"sources":["reducers.js"],"names":["initialState","searchField","searchRobots","state","action","type","CHANGE_SEARCH_FIELD","Object","assign","payload","initialStateRobots","isPending","robots","requestRobots","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","error"],"mappings":";;;;;;;AAAA;;AASA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB;;AAIO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAACH,YAAP,EAAoBI,MAAM,GAAC,EAA3B,KAAkC;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKC,8BAAL;AACQ,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBL,KAAjB,EAAwB;AAACF,QAAAA,WAAW,EAAEG,MAAM,CAACK;AAArB,OAAxB,CAAP;;AACR;AACI,aAAON,KAAP;AAJR;AAMH,CAPM;;;AASP,MAAMO,kBAAkB,GAAG;AACvBC,EAAAA,SAAS,EAAE,KADY;AAEvBC,EAAAA,MAAM,EAAE;AAFe,CAA3B;;AAKO,MAAMC,aAAa,GAAG,CAACV,KAAK,GAACO,kBAAP,EAA2BN,MAAM,GAAC,EAAlC,KAAyC;AAClE,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKS,iCAAL;AACI,aAAOP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAACQ,QAAAA,SAAS,EAAG;AAAb,OAAzB,CAAP;;AAEJ,SAAKI,iCAAL;AACI,aAAOR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAACS,QAAAA,MAAM,EAAER,MAAM,CAACK,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAAzB,CAAP;;AAEJ,SAAKK,gCAAL;AACI,aAAOT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAmBL,KAAnB,EAA0B;AAACc,QAAAA,KAAK,EAAGb,MAAM,CAACK,OAAhB;AAAyBE,QAAAA,SAAS,EAAE;AAApC,OAA1B,CAAP;;AAEJ;AACI,aAAOR,KAAP;AAXR;AAaH,CAdM","sourcesContent":["import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n\n} from './constants';\n\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState,action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n                return Object.assign({},state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}   \n\nconst initialStateRobots = {\n    isPending: false, \n    robots: []\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending : true})\n        \n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n    \n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({} , state, {error : action.payload ,isPending: false})\n        \n        default:\n            return state; \n    }\n}"]}