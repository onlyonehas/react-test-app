{"version":3,"sources":["actions.test.js"],"names":["mockStore","configureMockStore","thunkMiddleware","describe","it","text","expectedAction","type","CHANGE_SEARCH_FIELD","payload","expect","actions","setSearchField","toEqual","store","dispatch","requestRobots","action","getActions","console","log","REQUEST_ROBOTS_PENDING"],"mappings":";;;;;;AAAA;;AACA;;AAOA;;AACA;;AAEA,MAAMA,SAAS,GAAGC,kBAAkB,CAAC,CAACC,mBAAD,CAAD,CAApC;AAEAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC9BC,EAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACpD,UAAMC,IAAI,GAAG,KAAb;AACA,UAAMC,cAAc,GAAG;AACtBC,MAAAA,IAAI,EAAGC,8BADe;AAEtBC,MAAAA,OAAO,EAAEJ;AAFa,KAAvB;AAKAK,IAAAA,MAAM,CAACC,OAAO,CAACC,cAAR,CAAuBP,IAAvB,CAAD,CAAN,CAAqCQ,OAArC,CAA6CP,cAA7C;AACA,GARC,CAAF;AASA,CAVO,CAAR;AAYAH,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAChC,QAAMW,KAAK,GAAGd,SAAS,EAAvB;AACAc,EAAAA,KAAK,CAACC,QAAN,CAAeJ,OAAO,CAACK,aAAvB;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACI,UAAN,EAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AACA,QAAMX,cAAc,GAAG;AACtBC,IAAAA,IAAI,EAAGc;AADe,GAAvB;AAIAjB,EAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACrCM,IAAAA,MAAM,CAACC,OAAO,CAACK,aAAR,EAAD,CAAN,CAAgCH,OAAhC,CAAwCP,cAAxC;AAEA,GAHC,CAAF;AAIA,CAbO,CAAR","sourcesContent":["import * as actions from './actions'\nimport { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n} from './constants';\n\nimport configureStore from 'redux-mock-store'\nimport thunkMiddleware from 'redux-thunk'\n\nconst mockStore = configureMockStore([thunkMiddleware])\n\ndescribe('search field', () => {\n\tit('should create an action to search robots', () => {\n\t\tconst text = 'woo'\n\t\tconst expectedAction = {\n\t\t\ttype:  CHANGE_SEARCH_FIELD,\n\t\t\tpayload: text\n\t\t}\n\n\t\texpect(actions.setSearchField(text)).toEqual(expectedAction)\n\t})\n})\n\ndescribe('requesting api', () => {\n\tconst store = mockStore();\n\tstore.dispatch(actions.requestRobots)\n\tconst action = store.getActions()\n\tconsole.log('action', action)\n\tconst expectedAction = {\n\t\ttype:  REQUEST_ROBOTS_PENDING\n\t}\n\n\tit('handles requesting robots', () => {\n\t\texpect(actions.requestRobots()).toEqual(expectedAction)\n\n\t})\n})"]}