{"version":3,"sources":["components/ErrorBoundry.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","console","log","react_default","a","createElement","children","Component","Card","_ref","name","email","id","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","Scroll","style","overflowY","border","height","SearchBox","searchfield","searchChange","type","placeholder","onChange","Header","nextProps","nextState","App","count","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e3b153d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    console.log('ErrorBoundry');\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry","import React from 'react';\n\nconst Card = ({ name, email, id } ) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shoadow-5'>\n            <img alt='robots' src ={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n        {\n            robots.map((user, i) => {\n                return (\n                 <Card \n                     key={i} \n                     id={robots[i].id} \n                     name={robots[i].name} \n                     email={robots[i].email} \n                 /> \n                );\n            })\n        }\n        </div>        \n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style= {{overflowY : 'scroll', border:'5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div>\n            <input \n                className='ps3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n\n        </div>\n    );\n\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {setSearchField, requestRobots} from '../actions';\n\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport Header from '../components/Header';\n\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots, \n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }   \n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n          count: 1\n        }\n    }\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const {searchField, onSearchChange, robots, isPending} = this.props;       \n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return (  \n            <div className='tc'>\n                <Header count={this.state.count} />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    { isPending?  <h1> Loading </h1>:\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ ErrorBoundry >\n                    }\n                </Scroll>\n            </div>\n        );\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: 'CHANGE_SEARCH_FIELD',\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({\n            type: REQUEST_ROBOTS_PENDING\n        });\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type : REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED \n\n} from './constants';\n\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState,action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n                return Object.assign({},state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}   \n\nconst initialStateRobots = {\n    isPending: false, \n    robots: [], \n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending : true})\n        \n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n    \n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({} , state, {error : action.payload ,isPending: false})\n        \n        default:\n            return state; \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore, applyMiddleware , combineReducers} from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport {createLogger } from 'redux-logger';\n \nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer   , applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n                <Provider store={store}>    \n                    <App/>\n                </Provider>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}